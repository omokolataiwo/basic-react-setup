// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Component should render component 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <App
    postMessage={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "postMessage": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": <div>
        <form>
          <input
            type="text"
            value=""
          />
        </form>
        <h2 />
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Prompt
            onUpdateMessage={[Function]}
          />,
          <Screen
            message=""
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "onUpdateMessage": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": <form>
              <input
                type="text"
                value=""
              />
            </form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <input
                onChange={[Function]}
                type="text"
                value=""
              />,
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <input
                  type="text"
                  value=""
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "onChange": [Function],
                  "type": "text",
                  "value": "",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "input",
              },
            ],
            "type": "form",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "message": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": <h2 />,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "",
            },
            "ref": null,
            "rendered": Array [
              "",
            ],
            "type": "h2",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "postMessage": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": <div>
          <form>
            <input
              type="text"
              value=""
            />
          </form>
          <h2 />
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Prompt
              onUpdateMessage={[Function]}
            />,
            <Screen
              message=""
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "onUpdateMessage": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": <form>
                <input
                  type="text"
                  value=""
                />
              </form>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <input
                  onChange={[Function]}
                  type="text"
                  value=""
                />,
                "onSubmit": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <input
                    type="text"
                    value=""
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "onChange": [Function],
                    "type": "text",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "input",
                },
              ],
              "type": "form",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "message": "",
            },
            "ref": null,
            "rendered": Object {
              "instance": <h2 />,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
              },
              "ref": null,
              "rendered": Array [
                "",
              ],
              "type": "h2",
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
